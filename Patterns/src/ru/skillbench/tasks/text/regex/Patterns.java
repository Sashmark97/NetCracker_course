package ru.skillbench.tasks.text.regex;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * ЦЕЛЬ ЗАДАЧИ - научиться строить нетривиальные регулярные выражения, а также освоить пакет java.util.regex.<br/>
 * <p/>
 * ЗАДАНИЕ<br/>
 * 1. Построить шаблоны (регулярные выражения) для поиска идентификаторов SQL, email-ов, гиперссылок в HTML.<br/>
 * 2. Применить {@link Pattern} и {@link Matcher} для поиска/подсчета всех вхождений шаблона в строке.<br/>
 * <p/>
 * @author Alexey Vasiliev
 * @author Alexey Evdokimov
 */
public interface Patterns {
	
	/**
	 * Идентификаторы в стандартном SQL (имена таблиц, столбцов и др.) должны начинаться c буквы латинского алфавита, <br/> 
	 *  а остальными символами могут быть как буквы латинского алфавита, так и цифры, а также знаки подчеркивания ("_").<br/>
	 * Длина идентификатора не должна меньше 1 символа и не должна быть больше 30 символов.<br/>
	 * @return шаблон для поиска строк, удовлетворяющих вышеуказанным требованиям к идентификаторам языка SQL.
	*/
	public Pattern getSQLIdentifierPattern();
	
	/**
	 * Email имеет формат: "аккаунт"@"домен"."домен_первого_уровня"<br/>
	 * "Аккаунт" должен быть длиной не более 22 символов и состоять из символов:
	 *  латинские буквы, цифры, знак подчеркивания ("_"), точка ("."), дефис ("-").<br/> 
	 * Аккаунт не может начинаться с символов дефис ("-"), точка (".") или знак подчеркивания ("_").<br/>
	 * Аккаунт не может заканчиваться символом дефис ("-"), точка (".") или знак подчеркивания ("_").<br/>
	 * "Домен" может быть доменом любого уровня, каждый уровень отделяется от другого символом точка (".").<br/>
	 * Название домена каждого уровня должно состоять более чем из одного символа, 
	 *  начинаться и заканчиваться буквой латинского алфавита или цифрой.<br/>
	 * Промежуточными символами могут быть буквы латинского алфавита, цифры или дефис.<br/> 
	 * Например, следующие домены являются корректными в этом контексте: "s7" (в info@s7.ru)
	 *  или "e-katalog" (в "support@e-katalog.ru) или "echo.msk" (в echo@echo.msk.ru).<br/>
	 * "Домен_первого_уровня" - допустим один из следующих: .ru, .com, .net, .org.
	 * @return шаблон для поиска email адресов, удовлетворяющих вышеуказанным требованиям.
	 * */
	public Pattern getEmailPattern();

	/**
	 * Содержащиеся на web-странице гиперссылки описываются тегом &lt;a href = ...&gt; (или &lt;a href=.../&gt;).<br/>
	 *  Ремарка для начинающих: в HTML &gt; - это > ("больше"), &lt; - это < ("меньше"), а комментарии пишутся в таком
	 *  "странном" виде, чтобы они корректно отображались в HTML-справке, которая из них генерируется через javadoc).<br/>
	 *  То есть, следует читать: гиперссылки описываются тегом <a href = ...> (или <a href=.../>).<br/>
	 * Между символом "меньше", именем тега, названием атрибута, знаком "равно" и символом "больше" 
	 *   могут быть следующие пробельные символы: 
	 *   пробел, табуляция, возврат каретки (CR), перевод строки (LF), перевод формата (FF).<br/>
	 * <br/> 
	 * Метод должен выделять в HTML-тексте теги типа "гиперссылка", здесь
	 *   "гиперссылкой" будем условно называть закрытый или незакрытый тег A с обязательным атрибутом HREF.<br/>
	 * Имена тега A и атрибута HREF (как и другие имена в HTML) не чувствительны к регистру.<br/> 
	 * Значение атрибута href может быть заключено в двойные кавычки (href="значение"), хотя это необязательно.<br/>
	 * Если использованы кавычки, то в значении МОГУТ быть пробельные символы (см. выше), 
	 *   если кавычек нет - пробельных символов в значении быть не должно.<br/>
	 * @return шаблон для поиска в HTML-тексте тегов типа "гиперссылка".
	 * */
	public Pattern getHrefTagPattern();
		
	/**
	 * Метод возвращает список всех соответствий шаблону <code>pattern</code> в строке <code>input</code>.
	 * @param input строка для поиска
	 * @param pattern шаблон поиска.
	 * @return Список всех соответствий (пустой список, если соответствий нет). 
	 */
	public List<String> findAll(String input, Pattern pattern);
	
	/**
	 * Метод подсчитывает в строке <code>input</code> число соответствий шаблону, заданному выражением <code>regex</code>.
	 * На случай, если в <code>regex</code> встречаются буквы в конкретном регистре (как в выражении {@link #getHrefTagPattern()}),
	 *  следует предусмотреть, чтобы соответствием считались в т.ч. строки, содержащие те буквы в ином регистре. 
	 * @param input строка, подлежащая проверке.
	 * @param regex регулярное выражение - шаблон поиска.
	 * @return число соответствий шаблону в строке <code>input</code>.
	 * */
	public int countMatches(String input, String regex);
	
}
